name: Render review deploy
on:
  pull_request_target:
    types: [labeled, unlabeled, closed]
env:
  PR_NUMBER: ${{ github.event.number }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  pull-requests: write
  issues: write

jobs:

# Community Edition

  create-ce-review-app:
    if: ${{ github.event.action == 'labeled' && (github.event.label.name == 'create-ce-review-app' || github.event.label.name == 'review-app') }}
    runs-on: ubuntu-latest

    steps:
      - name: Sync repo
        uses: actions/checkout@v3

      - name: Check if Forked Repository
        id: check_repo
        run: |
          if [[ "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then
            echo "is_fork=true" >> $GITHUB_ENV
            echo "FORKED_OWNER=${{ github.event.pull_request.head.repo.owner.login }}" >> $GITHUB_ENV
          else
            echo "is_fork=false" >> $GITHUB_ENV
          fi

      - name: Set Repository URL
        run: |
          if [[ "$is_fork" == "true" ]]; then
            echo "REPO_URL=https://github.com/${FORKED_OWNER}/paybill" >> $GITHUB_ENV
          else
            echo "REPO_URL=https://github.com/paybilldev/paybill" >> $GITHUB_ENV
          fi

      - name: Fetch and Checkout Forked Branch
        if: env.is_fork == 'true'
        run: |
          git fetch origin pull/${{ github.event.number }}/head:${{ env.BRANCH_NAME }}
          git checkout ${{ env.BRANCH_NAME }}

      - name: Checkout Default Branch
        if: env.is_fork == 'false'
        uses: actions/checkout@v3

      - name: Creating deployment for CE
        id: create-ce-deployment
        run: |
          export RESPONSE=$(curl --request POST \
          --url https://api.render.com/v1/services \
          --header 'accept: application/json' \
          --header 'content-type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
          --data '
          {
            "autoDeploy": "yes",
            "branch": "${{ env.BRANCH_NAME }}",
            "name": "Paybill CE PR #${{ env.PR_NUMBER }}",
            "notifyOnFail": "default",
            "ownerId": "tea-caeo4bj19n072h3dddc0",
            "repo": "'"$REPO_URL"'",
            "slug": "paybill-ce-pr-${{ env.PR_NUMBER }}",
            "suspended": "not_suspended",
            "suspenders": [],
            "type": "web_service",
            "envVars": [
              {
                "key": "DB_HOST",
                "value": "${{ secrets.RENDER_DB_HOST }}"
              },
              {
                "key": "DB_PORT",
                "value": "5432"
              },
              {
                "key": "DB_USER",
                "value": "${{ secrets.RENDER_DB_USER }}"
              },
              {
                "key": "DB_PASSWORD",
                "value": "${{ secrets.RENDER_DB_PASSWORD }}"
              },
              {
                "key": "DB_DATABASE",
                "value": "${{ env.PR_NUMBER }}-ce"
              },
              {
                "key": "PORT",
                "value": "80"
              },
              {
                "key": "API_BASE_URL",
                "value": "https://paybill-ce-pr-${{ env.PR_NUMBER }}.onrender.com"
              },
              {
                "key": "TEMPORAL_SERVER_ADDRESS",
                "value": "https://auto-setup-1-25-1.onrender.com"
              },
              {
                "key": "TEMPORAL_TASK_QUEUE_NAME_FOR_WORKFLOWS",
                "value": "paybill-ce-pr-${{ env.PR_NUMBER }}"
              }
            ],
            "serviceDetails": {
              "disk": null,
              "env": "docker",
              "envSpecificDetails": {
                "dockerCommand": "",
                "dockerContext": "./",
                "dockerfilePath": "./docker/ce-preview.Dockerfile"
                },
                "healthCheckPath": "/api/__health_check",
                "numInstances": 1,
                "openPorts": [{
                "port": 80,
                "protocol": "TCP"
                }],
                "plan": "starter",
                "pullRequestPreviewsEnabled": "no",
                "region": "oregon",
                "url": "https://paybill-ce-pr-${{ env.PR_NUMBER }}.onrender.com"
            }
          }')

          echo "response: $RESPONSE"
          export SERVICE_ID=$(echo $RESPONSE | jq -r '.service.id')
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV

      - name: Comment deployment URL
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Community Edition:- \n Deployment: https://paybill-ce-pr-${{ env.PR_NUMBER }}.onrender.com \n Dashboard: https://dashboard.render.com/web/${{ env.SERVICE_ID }}'
            })

      - uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'create-ce-review-app'
              })
            } catch (e) {
              console.log(e)
            }

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['active-ce-review-app']
            })

  destroy-ce-review-app:
    if: ${{ (github.event.action == 'labeled' && github.event.label.name == 'destroy-ce-review-app') || github.event.action == 'closed' }}
    runs-on: ubuntu-latest

    steps:
      - name: Delete service
        run: |
          export SERVICE_ID=$(curl --request GET \
          --url 'https://api.render.com/v1/services?name=paybilldev%20CE%20PR%20%23${{ env.PR_NUMBER }}&limit=1' \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}' | \
           jq -r '.[0].service.id')

          curl --request DELETE \
          --url https://api.render.com/v1/services/$SERVICE_ID \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}'

      - uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'destroy-ce-review-app'
              })
            } catch (e) {
              console.log(e)
            }

            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'suspend-ce-review-app'
              })
            } catch (e) {
              console.log(e)
            }

            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'active-ce-review-app'
              })
            } catch (e) {
              console.log(e)
            }

      - name: Install PostgreSQL client
        run: |
          sudo apt update
          sudo apt install postgresql-client -y

      - name: Wait after installing PostgreSQL
        run: sleep 25

      - name: Drop PostgreSQL PR databases
        env:
          PGHOST: ${{ secrets.RENDER_DS_DB_HOST }}
          PGPORT: 5432
          PGUSER: ${{ secrets.RENDER_DS_DB_USER }}
          PGDATABASE: ${{ env.PR_NUMBER }}-ce
          PGPBBDATABASE: ${{ env.PR_NUMBER }}-ce-pbdb
        run: |
          if PGPASSWORD=${{ secrets.RENDER_DS_DB_PASSWORD }} psql -h $PGHOST -p $PGPORT -U $PGUSER -lqt | cut -d \| -f 1 | grep -qw $PGDATABASE; then
            echo "Database $PGDATABASE exists, deleting..."
            PGPASSWORD=${{ secrets.RENDER_DS_DB_PASSWORD }} psql -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "drop database \"$PGDATABASE\" ;"
          else
            echo "Database $PGDATABASE does not exist."
          fi

          if PGPASSWORD=${{ secrets.RENDER_DS_DB_PASSWORD }} psql -h $PGHOST -p $PGPORT -U $PGUSER -lqt | cut -d \| -f 1 | grep -qw $PGPBBDATABASE; then
            echo "Database $PGPBBDATABASE exists, deleting..."
            PGPASSWORD=${{ secrets.RENDER_DS_DB_PASSWORD }} psql -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "drop database \"$PGPBBDATABASE\" ;"
          else
            echo "Database $PGPBBDATABASE does not exist."
          fi

  suspend-ce-review-app:
    if: ${{ github.event.action == 'labeled' && github.event.label.name == 'suspend-ce-review-app' }}
    runs-on: ubuntu-latest

    steps:
      - name: Suspend service
        run: |
          export SERVICE_ID=$(curl --request GET \
          --url 'https://api.render.com/v1/services?name=paybilldev%20PR%20%23${{ env.PR_NUMBER }}&limit=1' \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}' | \
           jq -r '.[0].service.id')

          curl --request POST \
          --url https://api.render.com/v1/services/$SERVICE_ID/suspend \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}'

      - uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'active-ce-review-app'
              })
            } catch (e) {
              console.log(e)
            }

  resume-ce-review-app:
    if: ${{ github.event.action == 'unlabeled' && github.event.label.name == 'suspend-ce-review-app' }}
    runs-on: ubuntu-latest

    steps:
      - name: Resume service
        run: |
          export SERVICE_ID=$(curl --request GET \
          --url 'https://api.render.com/v1/services?name=paybilldev%20PR%20%23${{ env.PR_NUMBER }}&limit=1' \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}' | \
           jq -r '.[0].service.id')

          curl --request POST \
          --url https://api.render.com/v1/services/$SERVICE_ID/resume \
          --header 'accept: application/json' \
          --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}'

      - uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['active-ce-review-app']
            })

            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'suspend-ce-review-app'
              })
            } catch (e) {
              console.log(e)
            }

  render-bot-check-deployment:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && github.event.comment.body == '/render-check-deployment') ||
      (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'render-check-deployment')
    steps:
      - name: Get PR labels
        id: get_labels
        uses: actions/github-script@v6
        with:
          script: |
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            return labels.data.map(l => l.name);

      - name: Fetch CE service and deploy ID
        run: |
          SERVICE_ID=$(curl --silent --request GET \
            --url "https://api.render.com/v1/services?name=paybilldev%20CE%20PR%20%23${PR_NUMBER}&limit=1" \
            --header 'accept: application/json' \
            --header "authorization: Bearer $RENDER_API_KEY" \
            | jq -r '.[0].service.id')

          DEPLOY_ID=$(curl --silent --request GET \
            --url "https://api.render.com/v1/services/$SERVICE_ID/deploys?limit=1" \
            --header 'accept: application/json' \
            --header "authorization: Bearer $RENDER_API_KEY" \
            | jq -r '.[0].deploy.id')

          echo "CE_SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
          echo "CE_DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
        env:
          PR_NUMBER: ${{ env.PR_NUMBER }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

      - name: Comment CE deployment details
        uses: actions/github-script@v6
        env:
          PR_NUMBER: ${{ env.PR_NUMBER }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            const apiKey = process.env.RENDER_API_KEY;

            const ceServiceRes = await fetch(`https://api.render.com/v1/services?name=paybilldev%20CE%20PR%20%23${prNumber}&limit=1`, {
              headers: {
                'accept': 'application/json',
                'authorization': `Bearer ${apiKey}`
              }
            });
            const ceServices = await ceServiceRes.json();
            const ceServiceId = ceServices[0]?.service?.id || null;

            let ceInfo = 'No active CE review app deployment found.';
            if (ceServiceId) {
              const deployRes = await fetch(`https://api.render.com/v1/services/${ceServiceId}/deploys?limit=1`, {
                headers: {
                  'accept': 'application/json',
                  'authorization': `Bearer ${apiKey}`
                }
              });
              const deployData = await deployRes.json();
              const deploy = deployData[0]?.deploy || {};
              const ceCommit = deploy.commit || {};
              const status = deploy.status || 'unknown';
              ceInfo = `### Community Edition\n- App: https://paybill-ce-pr-${prNumber}.onrender.com\n- Dashboard: https://dashboard.render.com/web/${ceServiceId}\n- Commit: ${ceCommit.id || ''}\n- Message: ${ceCommit.message || ''}\n- Status: ${status}`;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ceInfo
            });

      - name: Remove label
        if: contains(steps.get_labels.outputs.result, 'render-check-deployment')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'render-check-deployment'
              })
            } catch (e) {
              console.log(e)
            }